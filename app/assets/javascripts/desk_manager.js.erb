// global objects
var imageObj = new Image();
var figuresSprite = new Image();


function rotateSquaresCoords(degree,centerPoint) {
	for (var square in squares_coords) {
		var point = squares_coords[square];

		var angle = degree * Math.PI / 180;
		var ox = centerPoint.x;
		var oy = centerPoint.y;
		var px = point.x;
		var py = point.y;
		var tmpX = Math.cos(angle) * (px-ox) - Math.sin(angle) * (py-oy) + ox;
		var tmpY = Math.sin(angle) * (px-ox) + Math.cos(angle) * (py-oy) + oy;
		squares_coords[square].x = tmpX;
		squares_coords[square].y = tmpY;
	};
}



$(document).ready(function() {

	var canvas = $('#scene-container');
	var context = canvas[0].getContext('2d');
	var centerPoint = {x: 0, y: 0};
	centerPoint.x = canvas.width()/2;
	centerPoint.y = canvas.height()/2;

	var errorContainer = $("#error-container");
	errorContainer.hide();
	
	imageObj.onload = function() {
		figuresSprite.onload = function() {
			drawAllFigures();
		};
		figuresSprite.src = "<%= asset_path 'chess_set.png' %>";
		drawDesk();
	};
	imageObj.src = "<%= asset_path 'desk.png' %>";

	var allFiguresData;

	getAllFiguresFromServer();

	var selectedSquare = undefined;

	if (userColor > 1) {
		degree = (userColor == 2) ? 240 : 120;
		rotateSquaresCoords(degree,centerPoint);
	}

	function drawAll() {
		drawDesk();
		drawAllFigures();
	}

	function drawDesk() {
		context.clearRect(0,0,canvas.width,canvas.height);
		context.save();
		console.log(userColor);
		if (userColor > 1) {
			degree = (userColor == 2) ? 240 : 120;
			console.log(degree);
			context.translate(canvas.width()/2,canvas.height()/2);
			context.rotate(degree*Math.PI/180);
			context.translate(-canvas.width()/2,-canvas.height()/2);
		};

		context.drawImage(imageObj, 0, 0, imageObj.naturalWidth,imageObj.naturalHeight);
		context.restore();
	}

	function drawAllFigures() {
		$.each(allFiguresData.users, function(index, user) {
			var color = user.color;
			$.each(user.figures, function(index, figure) {
				var squareName = figure.square.name;
				var figure_type = figure.figure_type;

				drawChessFigure(squareName, figure_type, color);
			});
		});
	}

	function getAllFiguresFromServer() {
		var url = deskID + ".json";
		$.getJSON( url, function( data ) {
			allFiguresData = data;
			drawAll();
		});
	}

	function drawChessFigure(square, figure_type, color) {
		var centerPoint = squares_coords[square];
		var xOffset = 0;
		var yOffset = 0;
		switch(figure_type) {
			case 1: // king
				xOffset = 1;
				break;
			case 2: // queen
				xOffset = 31;
				break;
			case 3: // rook
				xOffset = 120;
				break;
			case 4: // bishop
				xOffset = 60;
				break;
			case 5: // knight
				xOffset = 90;
				break;
			case 6: // pawn
				xOffset = 150;
				break;
		}

		switch(color) {
			case 1: // white
				yOffset = 60;
				break;
			case 2: // red
				yOffset = 0;
				break;
			case 3: // black
				yOffset = 30;
				break;
		}

		context.drawImage(figuresSprite,xOffset,yOffset,30,30,centerPoint.x - 15,centerPoint.y - 15,30,30);
	}

	function drawSelectionAtSquare(square) {
		var center = squares_coords[square];
		context.beginPath();
		context.arc(center.x, center.y, 15, 0, 2 * Math.PI, false);
		context.fillStyle = "rgba(0, 255, 0, 0.6)";
		context.fill();
	}

	function getSquareForPoint(point) {
		var px = point.x;
		var py = point.y;

		for (var key in squares_coords) {
			var squareCenter = squares_coords[key];
			var rect = {origin: {x: squareCenter.x - 15, y: squareCenter.y - 15},
						size: {width: 30, height: 30}};

			if (isRectContainPoint(rect,point)) {
				console.log(key);
				return key;
			}
		}
		console.log("miss");
		return undefined;
	}

	function isRectContainPoint(rect,point) {
		if (point.x >= rect.origin.x && 
			point.y >= rect.origin.y &&
			point.x <= (rect.origin.x + rect.size.width) &&
			point.y <= rect.origin.y + rect.size.height ) {
			return true;
		}
		return false;
	}

	canvas.click(function( e ) {
		var x;
		var y;
		if (e.pageX || e.pageY) { 
		  x = e.pageX;
		  y = e.pageY;
		} else { 
		  x = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft; 
		  y = e.clientY + document.body.scrollTop + document.documentElement.scrollTop; 
		} 
		x -= canvas[0].offsetLeft;
		y -= canvas[0].offsetTop;

		var point = {x: x, y: y};
		var square = getSquareForPoint(point);

		if (square) {
			var url;
			if (!selectedSquare) {
				url = deskID + "/select_figure?square=" + square;
			} else {
				url = deskID + "/move_figure?from=" + selectedSquare + "&to=" + square;
			};
			
			console.log(url);
			$.getJSON( url, function( data ) {
				if (!data.error) {
					if (!selectedSquare) {
						errorContainer.hide();
						selectedSquare = square;
						drawSelectionAtSquare(square);
					} else {
						selectedSquare = undefined;
						allFiguresData = data;
						drawAll();
					};
				} else {
					errorContainer.html(data.error);
					errorContainer.show();
					selectedSquare = undefined;
					drawAll();
					console.log(data.error);
				}
			});
		} else {
			selectedSquare = undefined;
			drawAll();
		}
	});

// NOTIFICATIONS
	var chat_channel = "/chess_desk/" + deskID + "/update";
	PrivatePub.subscribe(chat_channel, function(data, channel) {
		errorContainer.hide();
		getAllFiguresFromServer();
	});


});

var squares_coords = {
	// white piece
	A1: {x: 175, y: 459},
	B1: {x: 210, y: 459},
	C1: {x: 240, y: 459},
	D1: {x: 272, y: 459},
	E1: {x: 304, y: 459},
	F1: {x: 336, y: 459},
	G1: {x: 369, y: 459},
	H1: {x: 402, y: 459},

	A2: {x: 175, y: 419},
	B2: {x: 210, y: 412},
	C2: {x: 240, y: 405},
	D2: {x: 272, y: 399},
	E2: {x: 304, y: 399},
	F2: {x: 336, y: 405},
	G2: {x: 369, y: 412},
	H2: {x: 402, y: 419},

	A3: {x: 173, y: 381},
	B3: {x: 206, y: 369},
	C3: {x: 238, y: 358},
	D3: {x: 270, y: 346},
	E3: {x: 306, y: 346},
	F3: {x: 339, y: 358},
	G3: {x: 370, y: 369},
	H3: {x: 403, y: 381},

	A4: {x: 164, y: 348},
	B4: {x: 196, y: 331},
	C4: {x: 226, y: 316},
	D4: {x: 265, y: 294},
	E4: {x: 313, y: 294},
	F4: {x: 351, y: 316},
	G4: {x: 382, y: 331},
	H4: {x: 413, y: 348},

	// red piece
	N12: {x: 169, y: 56},
	M12: {x: 155, y: 86},
	L12: {x: 140, y: 115},
	K12: {x: 127, y: 144},
	D12: {x: 111, y: 172},
	C12: {x: 93,  y: 198},
	B12: {x: 75,  y: 224},
	A12: {x: 55,  y: 252},

	N11: {x: 204, y: 74},
	M11: {x: 193, y: 108},
	L11: {x: 183, y: 140},
	K11: {x: 174, y: 170},
	D11: {x: 158, y: 200},
	C11: {x: 136, y: 223},
	B11: {x: 115, y: 246},
	A11: {x: 91,  y: 272},

	N10: {x: 237, y: 94},
	M10: {x: 232, y: 128},
	L10: {x: 227, y: 161},
	K10: {x: 220, y: 196},
	D10: {x: 205, y: 228},
	C10: {x: 176, y: 248},
	B10: {x: 151, y: 271},
	A10: {x: 124, y: 293},

	N9: {x: 271, y: 102},
	M9: {x: 269, y: 137},
	L9: {x: 267, y: 172},
	K9: {x: 265, y: 214},
	D9: {x: 243, y: 258},
	C9: {x: 206, y: 282},
	B9: {x: 176, y: 298},
	A9: {x: 147, y: 319},

	// black piece
	H8: {x: 521, y: 252},
	G8: {x: 501, y: 224},
	F8: {x: 485, y: 198},
	E8: {x: 468, y: 172},
	K8: {x: 451, y: 144},
	L8: {x: 435, y: 115},
	M8: {x: 423, y: 86},
	N8: {x: 410, y: 56},

	H7: {x: 488, y: 272},
	G7: {x: 464, y: 246},
	F7: {x: 441, y: 223},
	E7: {x: 420, y: 200},
	K7: {x: 403, y: 170},
	L7: {x: 394, y: 140},
	M7: {x: 384, y: 108},
	N7: {x: 375, y: 74},

	H6: {x: 454, y: 293},
	G6: {x: 427, y: 271},
	F6: {x: 402, y: 248},
	E6: {x: 376, y: 228},
	K6: {x: 356, y: 196},
	L6: {x: 350, y: 161},
	M6: {x: 344, y: 128},
	N6: {x: 338, y: 94},

	H5: {x: 431, y: 319},
	G5: {x: 400, y: 298},
	F5: {x: 371, y: 282},
	E5: {x: 336, y: 258},
	K5: {x: 308, y: 214},
	L5: {x: 308, y: 172},
	M5: {x: 307, y: 137},
	N5: {x: 306, y: 102}
};